{
	"info": {
		"_postman_id": "1b2fd9a9-f8f0-411a-9aac-c1067920e9f3",
		"name": "TestMart - Validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "List all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check response status code\r",
							"pm.test(\"Código de status deve ser 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to verify that the response is valid JSON\r",
							"pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Test to see if the response contains the \"products\" key\r",
							"pm.test(\"A resposta deve conter a chave 'products'\", function () {\r",
							"    pm.response.to.have.jsonBody('products');\r",
							"});\r",
							"\r",
							"\r",
							"// Test to see if the \"products\" key is an array\r",
							"pm.test(\"A chave 'products' deve ser um array\", function () {\r",
							"    pm.expect(pm.response.json().products).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Test to verify that the \"products\" key contains at least one item\r",
							"pm.test(\"A chave 'products' deve conter pelo menos um item\", function () {\r",
							"    pm.expect(pm.response.json().products.length).to.be.above(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "https://dummyjson.com/products",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate the product list with parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check response status code\r",
							"pm.test(\"Código de status deve ser 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to verify that the response is valid JSON\r",
							"pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Test to see if the response contains the \"products\" key\r",
							"pm.test(\"A resposta deve conter a chave 'products'\", function () {\r",
							"    pm.response.to.have.jsonBody('products');\r",
							"});\r",
							"\r",
							"// Test to see if the \"products\" key is an array\r",
							"pm.test(\"A chave 'products' deve ser um array\", function () {\r",
							"    pm.expect(pm.response.json().products).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Test to verify that the \"products\" key contains exactly 10 items\r",
							"pm.test(\"A chave 'products' deve conter exatamente 10 itens\", function () {\r",
							"    pm.expect(pm.response.json().products.length).to.equal(10);\r",
							"});\r",
							"\r",
							"// Teste para verificar se cada item do array \"products\" contém apenas as chaves \"title\" e \"price\"\r",
							"pm.test(\"Cada item do array 'products' deve conter apenas as chaves 'title' e 'price'\", function () {\r",
							"    pm.response.json().products.forEach(function (product) {\r",
							"        pm.expect(Object.keys(product)).to.eql(['title', 'price']);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "https://dummyjson.com/products?limit=10&skip=10&select=title,price",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "skip",
							"value": "10"
						},
						{
							"key": "select",
							"value": "title,price"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate the category - Smartphone",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check response status code\r",
							"pm.test(\"Código de status deve ser 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to verify that the response is valid JSON\r",
							"pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Test to see if the response contains the \"products\" key\r",
							"pm.test(\"A resposta deve conter a chave 'products'\", function () {\r",
							"    pm.response.to.have.jsonBody('products');\r",
							"});\r",
							"\r",
							"// Test to see if the \"products\" key is an array\r",
							"pm.test(\"A chave 'products' deve ser um array\", function () {\r",
							"    pm.expect(pm.response.json().products).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Test to see if all items in the \"products\" array have the \"smartphones\" category\r",
							"pm.test(\"Todos os itens do array 'products' devem ter a categoria 'smartphones'\", function () {\r",
							"    pm.response.json().products.forEach(function (product) {\r",
							"        pm.expect(product.category).to.equal('smartphones');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "https://dummyjson.com/products/category/smartphones",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"products",
						"category",
						"smartphones"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User - Terry",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test the status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test the response body\r",
							"pm.test(\"Response body has correct user data\", function () {\r",
							"    // Parse the response body JSON\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    // Verify the user ID\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"\r",
							"    // Verify the user name\r",
							"    pm.expect(jsonData.name).to.eql(\"Terry\");\r",
							"\r",
							"      // Verify if the user name is wrong\r",
							"    pm.expect(jsonData.name).to.eql(\"Edward\");\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dummyjson.com/users/1",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Product",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"New Product\",\n    \"price\": 9.99\n}"
				},
				"url": {
					"raw": "https://dummyjson.com/products",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Define o ID do produto para excluir\r",
							"const productId = '4';\r",
							"\r",
							"// Envia a solicitação DELETE\r",
							"pm.sendRequest({\r",
							"  url: `https://dummyjson.com/products/${productId}`,\r",
							"  method: 'DELETE',\r",
							"}, function (err, response) {\r",
							"  // Verifica se não ocorreram erros durante a solicitação\r",
							"  if (err) {\r",
							"    console.error(err);\r",
							"    return;\r",
							"  }\r",
							"\r",
							"  // Verifica o status da resposta\r",
							"  pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"  });\r",
							"\r",
							"  // Verifica se a resposta contém o ID do produto excluído\r",
							"  pm.test('Response contains deleted product ID', function () {\r",
							"    pm.expect(response.json().id).to.eql(productId);\r",
							"  });\r",
							"\r",
							"  // Adicione outras asserções e ações necessárias\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://dummyjson.com/products/5",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"products",
						"5"
					]
				}
			},
			"response": []
		}
	]
}